import 'package:printful/src/api/client.dart';
import 'package:printful/src/models/oauth/scope.dart';
import 'package:printful/src/models/response/printful_response.dart';
import 'package:url_launcher/url_launcher.dart';

abstract interface class OauthRepository {
  ///[clientId] https://developers.printful.com/apps/add-new-app
  /// The `stateValue` parameter is a random string generated by your app
  /// to maintain state between the request and callback phases of the OAuth flow.
  /// It is used to prevent CSRF attacks by verifying the state returned by the server
  /// matches this value.
  ///
  /// Example:
  /// ```dart
  /// final stateValue = generateRandomState(); // e.g. 'abc123xyz'
  /// ```
  ///
  /// The OAuth server will send back this state value as a query parameter
  /// during redirect so you can verify it matches.
  ///
  ///
  /// The `redirectUrl` parameter specifies the URI to which the OAuth server
  /// will redirect the user after they approve or deny the authorization request.
  /// This URL must be registered and whitelisted in your OAuth app settings on the provider's dashboard.
  ///
  /// On web apps, this might be something like:
  /// ```
  /// https://yourdomain.com/oauth/callback
  /// ```
  ///
  /// On mobile apps, this is often a custom scheme deep link like:
  /// ```
  /// com.example.abc://oauth/callback
  /// ```
  ///
  /// After successful authorization, the OAuth server redirects the user to this URL
  /// with additional query parameters such as `code`, `state`, and `success`.
  ///[Android]
  ///<intent-filter>
  ///     <action android:name="android.intent.action.VIEW" />
  ///     <category android:name="android.intent.category.DEFAULT" />
  ///     <category android:name="android.intent.category.BROWSABLE" />
  ///     <data android:scheme="com.example.abc" android:host="oauth" android:path="/callback" />
  /// </intent-filter>
  /// [ios]
  /// <key>CFBundleURLTypes</key>
  /// <array>
  ///   <dict>
  ///     <key>CFBundleTypeRole</key>
  ///     <string>Editor</string>
  ///     <key>CFBundleURLName</key>
  ///     <string>com.example.abc</string>
  ///     <key>CFBundleURLSchemes</key>
  ///     <array>
  ///       <string>com.example.abc</string>
  ///     </array>
  ///   </dict>
  /// </array>
  Future<void> authorize({
    required String clientId,
    required String stateValue,
    required String redirectUrl,
  });

  ///Authorizations:OAuth
  ///Required [X-PF-Store-Id] use method [Printful.instance.setHeaderStoreId]
  ///Returns a list of scopes associated with the token
  Future<PrintfulResponse<Scope>> getScopesForToken();
}

class OauthRepositoryImpl implements OauthRepository {
  final PrintfulClient _client;

  OauthRepositoryImpl(this._client);

  @override
  Future<PrintfulResponse<Scope>> getScopesForToken() =>
      _client.getScopesForToken();

  @override
  Future<void> authorize({
    required String clientId,
    required String stateValue,
    required String redirectUrl,
  }) async {
    final url = Uri.parse(
      'https://www.printful.com/oauth/authorize'
      '?client_id=$clientId'
      '&state=$stateValue'
      '&redirect_url=$redirectUrl',
    );

    if (await canLaunchUrl(url)) {
      await launchUrl(url, mode: LaunchMode.externalApplication);
    } else {
      throw 'Could not launch $url';
    }
  }
}
