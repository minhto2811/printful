import 'package:flutter_web_auth_2/flutter_web_auth_2.dart';
import 'package:printful/printful.dart';
import 'package:printful/src/api/client.dart';
import 'package:printful/src/extensions/token_response_extension.dart';
import 'package:printful/src/models/oauth/authorization_code_request.dart';
import 'package:printful/src/models/oauth/refresh_token_request.dart';
import 'package:printful/src/models/oauth/token_response.dart';
import 'package:printful/src/services/token_manager.dart';

///Automatically store tokens with [fluttersecurestorage]
///Automatically refresh the token when expiring
abstract interface class OauthRepository {
  ///required call [Printful.instance.configPublicApp] earlier
  ///[clientId] https://developers.printful.com/apps/add-new-app
  /// The `stateValue` parameter is a random string generated by your app
  /// to maintain state between the request and callback phases of the OAuth flow.
  /// It is used to prevent CSRF attacks by verifying the state returned by the server
  /// matches this value.
  ///
  /// Example:
  /// ```dart
  /// final stateValue = generateRandomState(); // e.g. 'abc123xyz'
  /// ```
  ///
  /// The OAuth server will send back this state value as a query parameter
  /// during redirect so you can verify it matches.
  ///
  ///
  /// The `redirectUrl` parameter specifies the URI to which the OAuth server
  /// will redirect the user after they approve or deny the authorization request.
  /// This URL must be registered and whitelisted in your OAuth app settings on the provider's dashboard.
  ///
  /// On web apps, this might be something like:
  /// ```
  /// https://yourdomain.com/oauth/callback
  /// ```
  ///
  /// On mobile apps, this is often a custom scheme deep link like:
  /// ```
  /// com.example.abc://oauth/callback
  /// ```
  ///
  /// After successful authorization, the OAuth server redirects the user to this URL
  /// with additional query parameters such as `code`, `state`, and `success`.
  ///[Android]
  ///<activity
  ///android:name="com.linusu.flutter_web_auth_2.CallbackActivity"
  ///android:exported="true"
  ///android:taskAffinity="">
  ///   <intent-filter android:label="flutter_web_auth_2">
  ///       <action android:name="android.intent.action.VIEW" />
  ///       <category android:name="android.intent.category.DEFAULT" />
  ///       <category android:name="android.intent.category.BROWSABLE" />
  ///       <data android:scheme="SCHEME_HERE" />
  ///   </intent-filter>
  ///</activity>
  /// [ios]
  /// <key>CFBundleURLTypes</key>
  /// <array>
  ///   <dict>
  ///     <key>CFBundleTypeRole</key>
  ///     <string>Editor</string>
  ///     <key>CFBundleURLName</key>
  ///     <string>com.example.abc</string>
  ///     <key>CFBundleURLSchemes</key>
  ///     <array>
  ///       <string>com.example.abc</string>
  ///     </array>
  ///   </dict>
  /// </array>
  Future<TokenResponse> authorize({
    required String stateValue,
    required String redirectUrl,
    required String callbackUrlScheme,
  });

  ///Authorizations:OAuth
  ///Required [X-PF-Store-Id] use method [Printful.instance.setHeaderStoreId]
  ///Returns a list of scopes associated with the token
  Future<PrintfulResponse<Scope>> getScopesForToken();

  Future<TokenResponse> refreshToken({
    required RefreshTokenRequest refreshTokenRequest,
  });
}

class OauthRepositoryImpl implements OauthRepository {
  final PrintfulClient _client;
  final TokenManager _tokenManager;

  OauthRepositoryImpl(this._client, this._tokenManager);

  @override
  Future<PrintfulResponse<Scope>> getScopesForToken() =>
      _client.getScopesForToken();

  @override
  Future<TokenResponse> authorize({
    required String stateValue,
    required String redirectUrl,
    required String callbackUrlScheme,
  }) async {
    TokenResponse? tokenResponse = await _tokenManager.loadToken();
    if (tokenResponse != null) {
      if (tokenResponse.isValid) return tokenResponse;
      tokenResponse = await refreshToken(
        refreshTokenRequest: RefreshTokenRequest(
          clientId: Printful.instance.clientId!,
          clientSecret: Printful.instance.clientSecret!,
          refreshToken: tokenResponse.refreshToken,
        ),
      );
      _tokenManager.saveToken(tokenResponse);
      return tokenResponse;
    }
    final url = Uri.https('www.printful.com', '/oauth/authorize', {
      'client_id': Printful.instance.clientId,
      'state': stateValue,
      'redirect_url': redirectUrl,
    });
    final result = await FlutterWebAuth2.authenticate(
      url: url.toString(),
      callbackUrlScheme: callbackUrlScheme,
    );
    final queryParameters = Uri.parse(result).queryParameters;
    final state = queryParameters['state'];
    if (state == null) {
      throw Exception('User cancel');
    }
    if (state != stateValue) {
      throw Exception('The login session is invalid');
    }
    final code = queryParameters['code'];
    if (code == null) {
      throw Exception('Authorization code not found');
    }
    tokenResponse = await _client.authorize(
      AuthorizationCodeRequest(
        clientId: Printful.instance.clientId!,
        clientSecret: Printful.instance.clientSecret!,
        code: code,
      ),
    );
    _tokenManager.saveToken(tokenResponse);
    return tokenResponse;
  }

  @override
  Future<TokenResponse> refreshToken({
    required RefreshTokenRequest refreshTokenRequest,
  }) async {
    final tokenResponse = await _client.refreshToken(refreshTokenRequest);
    _tokenManager.saveToken(tokenResponse);
    return tokenResponse;
  }
}
